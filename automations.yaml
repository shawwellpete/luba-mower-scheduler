- id: unified_back_lawn_scheduler
  alias: Back Lawn Unified Scheduler
  triggers:
  - at: input_datetime.back_lawn_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.back_lawn_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_back_lawn
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.back_lawn_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_solar_lawn_scheduler
  alias: Solar Lawn Unified Scheduler
  triggers:
  - at: input_datetime.solar_lawn_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.solar_lawn_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_solar_lawn
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.solar_lawn_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_bottom_grass_scheduler
  alias: Bottom Grass Unified Scheduler
  triggers:
  - at: input_datetime.bottom_grass_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.bottom_grass_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_bottom_grass
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.bottom_grass_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_golf_lawn_scheduler
  alias: Golf Lawn Unified Scheduler
  triggers:
  - at: input_datetime.golf_lawn_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.golf_lawn_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_golf_lawn
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.golf_lawn_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_top_lawn_scheduler
  alias: Top Lawn Unified Scheduler
  triggers:
  - at: input_datetime.top_lawn_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.top_lawn_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_top_lawn
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.top_lawn_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_path_to_top_scheduler
  alias: Path to Top Unified Scheduler
  triggers:
  - at: input_datetime.path_to_top_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.path_to_top_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_path_to_top
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.path_to_top_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: unified_drive_lawn_scheduler
  alias: Drive Lawn Unified Scheduler
  triggers:
  - at: input_datetime.drive_lawn_next_time
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: input_select.drive_lawn_schedule
          state: never
        - condition: state
          entity_id: input_boolean.do_not_mow
          state: 'on'
      sequence:
      - action: script.mow_drive_lawn
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.drive_lawn_next_time
      data:
        datetime: '{% set now = now() %} {% set new_time = now + timedelta(hours=1)
          %} {% set sunset = as_timestamp(state_attr(''sun.sun'', ''next_setting''))
          %} {% set sunrise_tomorrow = as_timestamp(state_attr(''sun.sun'', ''next_rising''))
          %} {% if new_time.timestamp() >= (sunset - 7200) %} {% set final_time =
          sunrise_tomorrow + 7200 %} {% else %} {% set final_time = new_time.timestamp()
          %} {% endif %} {{ final_time | timestamp_custom(''%Y-%m-%d %H:%M:%S'', true)
          }}'
  mode: single
- id: eaa091c6eed04846ba3f9c7952370ac5
  alias: Update Last Lawn Mowed Name
  triggers:
  - entity_id:
    - input_datetime.back_lawn_last_mow_1
    - input_datetime.bottom_grass_last_mow_1
    - input_datetime.golf_lawn_last_mow_1
    - input_datetime.path_to_top_last_mow_1
    - input_datetime.top_lawn_last_mow_1
    - input_datetime.solar_lawn_last_mow_1
    - input_datetime.drive_lawn_last_mow_1
    trigger: state
  actions:
  - variables:
      lawns:
        input_datetime.back_lawn_last_mow_1: Back Lawn
        input_datetime.bottom_grass_last_mow_1: Bottom Grass
        input_datetime.golf_lawn_last_mow_1: Golf Lawn
        input_datetime.path_to_top_last_mow_1: Path to Top
        input_datetime.top_lawn_last_mow_1: Top Lawn
        input_datetime.solar_lawn_last_mow_1: Solar Lawn
        input_datetime.drive_lawn_last_mow_1: Drive Lawn
  - choose:
    - conditions: []
      sequence:
      - variables:
          last_mow: "{% set last = namespace(entity='', timestamp=0) %} {% for entity_id,
            name in lawns.items() %}\n  {% set ts = state_attr(entity_id, 'timestamp')
            %}\n  {% if ts is number and ts > last.timestamp %}\n    {% set last.entity
            = name %}\n    {% set last.timestamp = ts %}\n  {% endif %}\n{% endfor
            %} {{ last.entity }}\n"
      - target:
          entity_id: input_text.last_lawn_mowed
        data:
          value: '{{ last_mow }}'
        action: input_text.set_value
  mode: single
- id: do_not_mow_when_working
  alias: Do not mow when working
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.labby_activity_mode
    to: MODE_WORKING
  - trigger: state
    entity_id:
    - lawn_mower.labby
    to: mowing
    for:
      hours: 0
      minutes: 2
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.do_not_mow
  - action: input_text.set_value
    metadata: {}
    data:
      value: mowing or charging
    target:
      entity_id: input_text.reason_no_mow
  mode: single


- id: do_not_mow_if_heavy_rain
  alias: Do Not Mow if Heavy Rain
  triggers:
  - entity_id: sensor.owmh_home_day0rain
    trigger: state
  - minutes: /30
    trigger: time_pattern
  conditions:
  - or:
    - condition: template
      value_template: '{{ states(''sensor.owmh_home_day0rain'') | float > 3 }}'
    - condition: template
      value_template: '{{ states(''sensor.sevenoaks_probability_of_precipitation'')
        | float > 50 }}'
  actions:
  - entity_id: input_boolean.do_not_mow
    action: input_boolean.turn_on
  - if:
    - condition: template
      value_template: '{{ states(''sensor.owmh_home_day0rain'') | float > 3 }}'
    then:
    - action: input_text.set_value
      metadata: {}
      data:
        value: wet ground
      target:
        entity_id: input_text.reason_no_mow
    else:
    - action: input_text.set_value
      metadata: {}
      data:
        value: rain soon
      target:
        entity_id: input_text.reason_no_mow
- id: reset_do_not_mow_if_no_heavy_rain
  alias: Reset Do Not Mow if No Heavy Rain
  triggers:
  - entity_id: sensor.owmh_home_day0rain
    trigger: state
  - minutes: /30
    trigger: time_pattern
  - trigger: numeric_state
    entity_id:
    - sensor.labby_battery
    above: 97
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states(''sensor.owmh_home_day0rain'') | float <= 3 }}'
    - condition: template
      value_template: '{{ states(''sensor.sevenoaks_probability_of_precipitation'')
        | float <= 50 }}'
    - condition: state
      entity_id: sensor.labby_activity_mode
      state: MODE_READY
    - condition: numeric_state
      entity_id: sensor.labby_battery
      above: 95
    - condition: sun
      after: sunrise
      after_offset: 01:00:00
      before: sunset
      before_offset: -01:00:00
  actions:
  - target:
      entity_id: input_boolean.do_not_mow
    action: input_boolean.turn_off
    data: {}
  mode: single
- id: do_not_mow_before_sunset
  alias: Do Not Mow Before Sunset
  triggers:
  - event: sunset
    offset: -01:00
    trigger: sun
  conditions:
  - condition: state
    entity_id: input_boolean.block_night_mowing
    state: 'on'
  actions:
  - target:
      entity_id: input_boolean.do_not_mow
    action: input_boolean.turn_on
    data: {}
  - action: input_text.set_value
    metadata: {}
    data:
      value: night time
    target:
      entity_id: input_text.reason_no_mow
- id: allow_mowing_at_sunrise
  alias: Allow Mowing at Sunrise
  triggers:
  - event: sunrise
    trigger: sun
    offset: '1:00:00'
  conditions:
  - condition: state
    entity_id: input_boolean.block_night_mowing
    state: 'on'
  - condition: template
    value_template: '{{ states(''sensor.owmh_home_day0rain'') | float < 3 }}'
  - condition: template
    value_template: '{{ states(''sensor.sevenoaks_probability_of_precipitation'')
      | float < 50 }}'
  actions:
  - target:
      entity_id: input_boolean.do_not_mow
    action: input_boolean.turn_off
    data: {}
- id: '1745145855145'
  alias: Add Mowing Hours on Mow End
  trigger:
  - platform: state
    entity_id: lawn_mower.labby
    from: mowing
    to: returning
  condition: []
  action:
  - service: input_number.set_value
    data:
      entity_id: input_number.hours_since_last_blade_maintenance
      value: '{% set current = states(''input_number.hours_since_last_blade_maintenance'')
        | float(0) %} {% set job_seconds = states(''sensor.labby_task_duration'')
        | float(0) %} {% set job_hours = job_seconds / 3600 %} {{ (current + job_hours)
        | round(1) }}

        '
  mode: single
